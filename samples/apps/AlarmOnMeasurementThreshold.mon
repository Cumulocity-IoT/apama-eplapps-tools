/*
 Copyright (c) 2020-present Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 file except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software distributed under the
 License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied.
 See the License for the specific language governing permissions and limitations under the License.
*/

/**
* This application listens for measurements of type "myMeasurementType"
* and raises a "ThresholdExceededAlarm" if measurement value exceeds 100.0.
*/

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.Alarm;

/**
* Raise Alarm if Measurement exceeds a threshold value
*/
monitor AlarmOnMeasurementThreshold {

	// Measurement Type
	constant string MEASUREMENT_TYPE := "myMeasurementType";

	// Measurement Fragment & Series
	constant string FRAGMENT := "myFragment";
	constant string SERIES := "mySeries";

	// Measurement Threshold -> Raise an alarm if measurement exceeds this value
	constant float MEASUREMENT_THRESHOLD := 100.0;

	// Type of alarm to be raised when measurement breaches a threshold
	constant string ALARM_TYPE := "ThresholdExceededAlarm";
	constant string ALARM_SEVERITY := "MINOR";

	action onload() {

		// Subscribe to Measurement.SUBSCRIBE_CHANNEL to receive all measurements
		monitor.subscribe(Measurement.SUBSCRIBE_CHANNEL);

		on all Measurement(type=MEASUREMENT_TYPE) as m {
			float value := m.measurements.getOrDefault(FRAGMENT).
												getOrDefault(SERIES).value;
			// Measurement value is greater than the threshold value, raise alarm
			if value > MEASUREMENT_THRESHOLD {
				Alarm alarm := new Alarm;
				alarm.source := m.source;
				alarm.time := currentTime;
				alarm.text := "Measurement value " + value.toString() +
						" exceeded threshold value " +
						MEASUREMENT_THRESHOLD.toString() + ", raising an alarm";
				alarm.type := ALARM_TYPE;
				alarm.status := "ACTIVE";
				alarm.severity := ALARM_SEVERITY;
				send alarm to Alarm.SEND_CHANNEL;
			}
		}
	}
}
