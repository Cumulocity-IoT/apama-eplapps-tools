/*
 Copyright (c) 2022-present Cumulocity GmbH, Duesseldorf, Germany and/or its affiliates and/or their licensors.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 file except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software distributed under the
 License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied.
 See the License for the specific language governing permissions and limitations under the License.
*/

/**
* This EPL app listens for all measurements of a specified type with
* a specified fragment and series that are received on the tenant and raises an alarm if a measurement value 
* exceeds the specified threshold against the same tenant in a multi-tenant environment.
*/

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.Alarm;

using com.apama.cumulocity.SharedConnection;
using com.apama.cumulocity.TenantDetails;
using com.apama.cumulocity.TenantSubscriptionNotifier;


/**
* Raise an alarm if a measurement value exceeds the threshold value
*/
monitor AlarmOnMeasurementThresholdMultiTenant  {

    /** The measurement type to listen for. */
    constant string MEASUREMENT_TYPE := "myMeasurementType";

    /** The measurement fragment to listen for. */
    constant string FRAGMENT := "myFragment";

    /** The measurement series to listen for. */
    constant string SERIES := "mySeries";

    /** The threshold value. Raise an alarm if a measurement value exceeds this value. */
    constant float MEASUREMENT_THRESHOLD := 100.0;

    /** The type of alarm to raise when a measurement value exceeds the threshold value. */
    constant string ALARM_TYPE := "ThresholdExceededAlarm";

    /** The severity of the alarm to raise. */
    constant string ALARM_SEVERITY := "MINOR";
    
    /** The connection object for the tenant. 
    *   It is used to get correct channels for sending and receiving events.
    */
    SharedConnection connection;

    action onload() {

        /* Create a new instance of the TenantSubscriptionNotifier 
        *  to get notifications of tenant subscriptions and unsubscriptions.
        *  For more details see, https://cumulocity.com/apama/docs/10.15/standard-connectivity-plugins/the-cumulocity-iot-transport-connectivity-plug-in/#working-with-multi-tenant-deployments
        */
        TenantSubscriptionNotifier notifier := TenantSubscriptionNotifier.create().onSubscription(ontenantSubscribed).onUnsubscription(ontenantUnSubscribed);

    }

    /** An action which is called back when a tenant is subscribed. 
    *
    *   @param tenant The TenantDetails event.
    */
    action ontenantSubscribed(TenantDetails tenant) {
        
        /* Create a connection object for this tenant so that we can send events to
        *  this tenant and receive events from it.
        *  For more information on supported connection types, see
        *  https://cumulocity.com/apama/docs/10.15/standard-connectivity-plugins/the-cumulocity-iot-transport-connectivity-plug-in/#optimizing-requests-to-cumulocity-iot-with-concurrent-connections
        */
        connection := SharedConnection.createForTenant(tenant);
        
        // Subscribe to Measurement.SUBSCRIBE_CHANNEL to receive all measurements.
        monitor.subscribe(connection.getChannel(Measurement.SUBSCRIBE_CHANNEL));

        // Listen for a measurement of type MEASUREMENT_TYPE.
        on all Measurement(type=MEASUREMENT_TYPE) as m {
            float value := m.measurements.getOrDefault(FRAGMENT).
                                                getOrDefault(SERIES).value;
            // If the measurement value is greater than the threshold value, raise an alarm.
            if value > MEASUREMENT_THRESHOLD {
                Alarm alarm := new Alarm;
                alarm.source := m.source;
                alarm.time := currentTime;
                alarm.text := "Measurement value " + value.toString() +
                        " exceeded threshold value " +
                        MEASUREMENT_THRESHOLD.toString() + ", raising an alarm";
                alarm.type := ALARM_TYPE;
                alarm.status := "ACTIVE";
                alarm.severity := ALARM_SEVERITY;
                // Send an alarm to the tenant-specific channel.
                send alarm to connection.getChannel(Alarm.SEND_CHANNEL);
            }
        }
    }

    /** An action which is called back when a tenant is unsubscribed. 
    *
    *   @param tenantId the ID of the tenant.
    */
    action ontenantUnSubscribed(string tenantId){
        // Destroy the connection object.
        connection.destroy();
        /* Do not need to explicitly terminate this monitor instance as it
        *  is automatically done.
        */
    }
}
